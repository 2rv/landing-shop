import * as React from 'react';
import { RouteComponentProps } from 'react-router-dom';
import { getLastLocation } from './LastLocationProvider';
export interface WithLastLocationProps extends RouteComponentProps {
    lastLocation: ReturnType<typeof getLastLocation>;
}
declare const withLastLocation: <WrappedProps extends WithLastLocationProps>(WrappedComponent: React.ComponentType<WrappedProps>) => React.ComponentClass<Pick<Pick<WrappedProps, import("utility-types").SetDifference<keyof WrappedProps, "history" | "location" | "match" | "staticContext" | "lastLocation">> & RouteComponentProps<{}, import("react-router").StaticContext, any>, Exclude<import("utility-types").SetDifference<keyof WrappedProps, "history" | "location" | "match" | "staticContext" | "lastLocation">, "history" | "location" | "match" | "staticContext">>, any>;
export default withLastLocation;
